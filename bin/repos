#!/usr/bin/env bash

pushd "${PWD}" > /dev/null \
  && trap 'popd &> /dev/null' EXIT HUP INT QUIT TERM

OK=" 👌 "
ERROR=" 🚫 "
SUN=" 🔅 "
ARROW=" ➡️  "

# Only print when redirecting to &3
exec 3>/dev/stdout
exec 4>/dev/stderr
exec 1>/dev/null
exec 2>/dev/null

_print() { echo -ne "$1" >&3; }
_println() { echo -ne "$1\n" >&3; }
_printerr() { echo -ne "$1" >&4; }
sun() { _println "${SUN}$1"; }
log() { _print "\t\t $1"; }
arrow() { log "${ARROW}$1"; }
errormsg() { _printerr "\033[31m${ERROR}\n\t\t\t$1\033[0m"; }

status_for() {
  read -r error < <(eval "$*" 2>&1 1>/dev/null)

  if [ -z "${error}" ]
  then
    _print "${OK}\n"
    return 0
  else
    errormsg "${error}\n"
    return 1
  fi
}

sync() {
  local master
  local current_branch
  local path

  path="$1"

  pushd "${path}"

  master="$(cat .git/custom-master 2> /dev/null || echo 'master')"
  current_branch="$(git symbolic-ref --short HEAD)"

  sun "Updating ${path}"

  for branch in $(git branch --list | cut -c 3-)
  do
    log "» ${branch}"

    git switch "${branch}" 2>/dev/null
    git fetch --prune --prune-tags --tags --recurse-submodules
    (status_for git pull) || break


    if [ "${branch}" == "${current_branch}" ] \
      && [ "${current_branch}" != "${master}" ]
        then
          arrow "Rebasing '${current_branch}' on '${master}'"
          status_for git rebase "${master}"
    fi
  done

  git switch "${current_branch}" 2>/dev/null

  popd
}

clone() {
  remote="$1"
  path="$2"

  sun "Cloning ${remote} to ${path}"
  status_for git clone "${remote}" "${path}" --recurse-submodules
}

_update() {
  local path=""
  trap 'exit 1' EXIT HUP INT QUIT TERM

  IFS=':' read -ra files <<< "${1:-${REPOS_FILES}}"
  for file in "${files[@]}"
  do
    while IFS='|' read -r remote path
    do
      [ "${remote}" == "" ] && continue

      path="${path//\$HOME/$HOME}"

      if [ -d "${path}" ]
      then
        sync "${path}"
      else
        clone "${remote}" "${path}"
      fi
    done < "${file}"
  done
}

_list() {
  pushd "$1" > /dev/null \
    && trap 'popd > /dev/null' EXIT HUP INT QUIT TERM

  find "${PWD}" -mindepth 1 -maxdepth 1 -type d \
    | sort -u \
    | while IFS= read -r repo
    do
      if [ -d "${repo}/.git" ]
      then
        cd "${repo}" &>/dev/null || exit 1
        target="${PWD%% }"
        remote="$(git remote get-url --push origin)"

        if [ -n "$remote" ]
        then
          _println "${remote}|${target/${HOME}/\$HOME}"
        fi

      cd - &>/dev/null || exit 1
    fi
  done
}

_help() {
  _println "Manage (clone, sync, list) git repositories

USAGE: repos [--list path|--update]
Options:
\t--update | -u \tupdates the list of repositories on \$REPOS_FILES
\t  --list | -l \tlist the repositories on the given path

\`\$REPOS_FILES\` must contain a list of files separated by \`:\`
A Reposfile must contain a list of repos to sync, each line should follow the format:
  \`<git remote url>|<destination folder>\`"
}

case "$1" in
  --update|-u)
    shift
    _update "$@"
    ;;
  --list|-l)
    shift
    _list "$@"
    ;;
  *)
    _help
    ;;
esac
