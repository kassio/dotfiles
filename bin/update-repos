#!/usr/bin/env bash

pushd "${PWD}" > /dev/null && trap 'popd &> /dev/null' EXIT HUP INT QUIT TERM

OK=" 👌 "
ERROR=" 🚫 "
SUN=" 🔅 "
ARROW=" ➡️  "

# Only print when redirecting to &3
exec 3>/dev/stdout
exec 1>/dev/null

function _print() { echo -ne "$1" >&3; }
function sun() { _print "${SUN} $1\n"; }
function log() { _print "\t\t $1"; }
function arrow() { log "${ARROW} $1"; }
function errormsg() { _print "\t\t\t \033[31m  ✖  $1\033[0m"; }


function status() {
  if [ -z "$1" ]
  then
    _print " ${OK}\n"
  else
    _print " ${ERROR}\n"
    errormsg "$1\n"
  fi
}

function sync() {
  trap 'exit -1' EXIT HUP INT QUIT TERM

  local remote="$1"
  local path="$2"

  function update() {
    pushd "${path}"

    local master="$(cat .git/custom-master 2> /dev/null || echo 'master')"
    local current_branch="$(git symbolic-ref --short HEAD)"

    sun "Updating ${path}"

    for branch in $(git branch --list | cut -c 3-)
    do
      log "» ${branch}"

      git switch "${branch}" 2>/dev/null
      git fetch --prune --prune-tags --tags --recurse-submodules
      read error < <(git pull 2>&1 >/dev/null)
      status "${error}"
    done

    git switch "${current_branch}" 2>/dev/null

    if [ "${current_branch}" != "${master}" ]
    then
      arrow "Rebasing '${current_branch}' on '${master}'"
      git rebase "${master}"
      status
    fi

    popd
  }

  function clone() {
    sun "Cloning ${remote} to ${path}"
    git clone "${remote}" "${path}" --recurse-submodules
    status
  }

  if [ -d "${path}" ]
  then
    update
  else
    clone
  fi
}

IFS=':' read -ra files <<< "${1:-${REPOS_FILES}}"
for file in "${files[@]}"
do
  while IFS='|' read -r remote path
  do
    sync "${remote}" "${path//\$HOME/$HOME}"
  done < "${file}"
done
