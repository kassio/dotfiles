#!/usr/bin/env bash

pushd "${PWD}" > /dev/null && trap 'popd &> /dev/null' EXIT HUP INT QUIT TERM

OK=" 👌 "
ERROR=" 🚫 "
SUN=" 🔅 "
ARROW=" ➡️  "

# Only print when redirecting to &3
exec 3>/dev/stdout
exec 1>/dev/null
exec 2>/dev/null

function print() { echo -ne "$1" >&3; }
function sun() { print "${SUN} $1"; }
function log() { print "\t\t $1"; }
function arrow() { log "${ARROW} $1"; }

function status() {
  if [ $? -eq 0 ]
  then
    print " ${OK}\n"
  else
    print " ${ERROR}\n"
  fi
}

function sync() {
  trap 'exit -1' EXIT HUP INT QUIT TERM

  local remote="$1"
  local path="$2"

  function update() {
    pushd "${path}"

    local master="$(cat .git/custom-master || echo 'master')"
    local branch="$(git symbolic-ref --short HEAD)"

    sun "Updating ${path}\n"

    if [ "${branch}" != "${master}" ]
    then
      log "» ${branch}"
      fetch_pull
      status

      git checkout "${master}"
      log "» ${master}"
      fetch_pull
      status

      git checkout "${branch}"
      arrow "Rebasing '${branch}' on '${master}'"
      git rebase "${master}"
      status
    else
      log "» ${master}"
      fetch_pull
      status
    fi

    popd
  }

  function fetch_pull() {
    git fetch --prune --prune-tags --tags --recurse-submodules
    git pull
  }

  function clone() {
    echo "${SUN} Cloning ${remote} to ${path}"
    git clone "${remote}" "${path}" --recurse-submodules
    status
  }

  if [ -d "${path}" ]
  then
    update
  else
    clone
  fi
}

IFS=':' read -ra files <<< "${1:-${REPOS_FILES}}"

for file in "${files[@]}"
do
  while IFS='|' read -r remote path
  do
    sync "${remote}" "$(echo -n "${path#*|}" | sed "s#\$HOME#$HOME#") "
  done < "${file}"
done
